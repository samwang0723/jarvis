// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package sqlcdb

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
)

const GetOrderView = `-- name: GetOrderView :one
SELECT id, user_id, stock_id, buy_price, buy_quantity, buy_exchange_date, sell_price, sell_quantity, sell_exchange_date, profitable_price, status, version, created_at, updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderView(ctx context.Context, id uuid.UUID) (*Order, error) {
	row := q.db.QueryRow(ctx, GetOrderView, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockID,
		&i.BuyPrice,
		&i.BuyQuantity,
		&i.BuyExchangeDate,
		&i.SellPrice,
		&i.SellQuantity,
		&i.SellExchangeDate,
		&i.ProfitablePrice,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpsertOrderView = `-- name: UpsertOrderView :exec
INSERT INTO orders (id, user_id, stock_id, buy_price, buy_quantity,
buy_exchange_date, sell_price, sell_quantity, sell_exchange_date, profitable_price,
status, version)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
ON CONFLICT (id) DO UPDATE
SET user_id = EXCLUDED.user_id, 
  stock_id = EXCLUDED.stock_id,
  buy_price = EXCLUDED.buy_price, 
  buy_quantity = EXCLUDED.buy_quantity, 
  buy_exchange_date = EXCLUDED.buy_exchange_date,
  sell_price = EXCLUDED.sell_price, 
  sell_quantity = EXCLUDED.sell_quantity, 
  sell_exchange_date = EXCLUDED.sell_exchange_date,
  profitable_price = EXCLUDED.profitable_price, 
  status = EXCLUDED.status, 
  version = EXCLUDED.version
`

type UpsertOrderViewParams struct {
	ID               uuid.UUID
	UserID           uuid.UUID
	StockID          string
	BuyPrice         float64
	BuyQuantity      int64
	BuyExchangeDate  string
	SellPrice        float64
	SellQuantity     int64
	SellExchangeDate string
	ProfitablePrice  float64
	Status           string
	Version          int32
}

func (q *Queries) UpsertOrderView(ctx context.Context, arg *UpsertOrderViewParams) error {
	_, err := q.db.Exec(ctx, UpsertOrderView,
		arg.ID,
		arg.UserID,
		arg.StockID,
		arg.BuyPrice,
		arg.BuyQuantity,
		arg.BuyExchangeDate,
		arg.SellPrice,
		arg.SellQuantity,
		arg.SellExchangeDate,
		arg.ProfitablePrice,
		arg.Status,
		arg.Version,
	)
	return err
}
