// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: picked_stock.sql

package sqlcdb

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
)

const CreatePickedStocks = `-- name: CreatePickedStocks :exec
INSERT INTO picked_stocks (user_id, stock_id)
SELECT unnest($1::uuid[]), unnest($2::text[])
`

type CreatePickedStocksParams struct {
	UserIds  []uuid.UUID
	StockIds []string
}

func (q *Queries) CreatePickedStocks(ctx context.Context, arg *CreatePickedStocksParams) error {
	_, err := q.db.Exec(ctx, CreatePickedStocks, arg.UserIds, arg.StockIds)
	return err
}

const DeletePickedStock = `-- name: DeletePickedStock :exec
UPDATE picked_stocks SET deleted_at = NOW() 
WHERE user_id = $1 AND stock_id = $2 AND deleted_at IS NULL
`

type DeletePickedStockParams struct {
	UserID  uuid.UUID
	StockID string
}

func (q *Queries) DeletePickedStock(ctx context.Context, arg *DeletePickedStockParams) error {
	_, err := q.db.Exec(ctx, DeletePickedStock, arg.UserID, arg.StockID)
	return err
}

const ListPickedStocks = `-- name: ListPickedStocks :many
SELECT id, user_id, stock_id, created_at, updated_at, deleted_at FROM picked_stocks 
WHERE deleted_at IS NULL AND user_id = $1
`

func (q *Queries) ListPickedStocks(ctx context.Context, userID uuid.UUID) ([]*PickedStock, error) {
	rows, err := q.db.Query(ctx, ListPickedStocks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PickedStock
	for rows.Next() {
		var i PickedStock
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
