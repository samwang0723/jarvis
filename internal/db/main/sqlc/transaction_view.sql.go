// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction_view.sql

package sqlcdb

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
)

const GetTransactionView = `-- name: GetTransactionView :one
SELECT id, user_id, order_id, order_type, credit_amount, debit_amount, status, version, created_at, updated_at
FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionView(ctx context.Context, id uuid.UUID) (*Transaction, error) {
	row := q.db.QueryRow(ctx, GetTransactionView, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderID,
		&i.OrderType,
		&i.CreditAmount,
		&i.DebitAmount,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpsertTransactionView = `-- name: UpsertTransactionView :exec
INSERT INTO transactions (id, user_id, order_id, order_type, credit_amount, debit_amount, status, version)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (id) DO UPDATE
SET user_id = EXCLUDED.user_id, 
  order_id = EXCLUDED.order_id,
  order_type = EXCLUDED.order_type, 
  credit_amount = EXCLUDED.credit_amount, 
  debit_amount = EXCLUDED.debit_amount, 
  status = EXCLUDED.status, 
  version = EXCLUDED.version
`

type UpsertTransactionViewParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	OrderID      uuid.UUID
	OrderType    string
	CreditAmount float64
	DebitAmount  float64
	Status       string
	Version      int32
}

func (q *Queries) UpsertTransactionView(ctx context.Context, arg *UpsertTransactionViewParams) error {
	_, err := q.db.Exec(ctx, UpsertTransactionView,
		arg.ID,
		arg.UserID,
		arg.OrderID,
		arg.OrderType,
		arg.CreditAmount,
		arg.DebitAmount,
		arg.Status,
		arg.Version,
	)
	return err
}
