// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	redislock "github.com/bsm/redislock"
	uuid "github.com/gofrs/uuid/v5"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/samwang0723/jarvis/internal/app/domain"
	dto "github.com/samwang0723/jarvis/internal/app/dto"
	services "github.com/samwang0723/jarvis/internal/app/services"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockIService) AddJob(ctx context.Context, spec string, job func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", ctx, spec, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob.
func (mr *MockIServiceMockRecorder) AddJob(ctx, spec, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockIService)(nil).AddJob), ctx, spec, job)
}

// BatchUpsertDailyClose mocks base method.
func (m *MockIService) BatchUpsertDailyClose(ctx context.Context, objs *[]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertDailyClose", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpsertDailyClose indicates an expected call of BatchUpsertDailyClose.
func (mr *MockIServiceMockRecorder) BatchUpsertDailyClose(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertDailyClose", reflect.TypeOf((*MockIService)(nil).BatchUpsertDailyClose), ctx, objs)
}

// BatchUpsertPickedStocks mocks base method.
func (m *MockIService) BatchUpsertPickedStocks(ctx context.Context, objs []*domain.PickedStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertPickedStocks", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpsertPickedStocks indicates an expected call of BatchUpsertPickedStocks.
func (mr *MockIServiceMockRecorder) BatchUpsertPickedStocks(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertPickedStocks", reflect.TypeOf((*MockIService)(nil).BatchUpsertPickedStocks), ctx, objs)
}

// BatchUpsertStakeConcentration mocks base method.
func (m *MockIService) BatchUpsertStakeConcentration(ctx context.Context, objs *[]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertStakeConcentration", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpsertStakeConcentration indicates an expected call of BatchUpsertStakeConcentration.
func (mr *MockIServiceMockRecorder) BatchUpsertStakeConcentration(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertStakeConcentration", reflect.TypeOf((*MockIService)(nil).BatchUpsertStakeConcentration), ctx, objs)
}

// BatchUpsertStocks mocks base method.
func (m *MockIService) BatchUpsertStocks(ctx context.Context, objs *[]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertStocks", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpsertStocks indicates an expected call of BatchUpsertStocks.
func (mr *MockIServiceMockRecorder) BatchUpsertStocks(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertStocks", reflect.TypeOf((*MockIService)(nil).BatchUpsertStocks), ctx, objs)
}

// BatchUpsertThreePrimary mocks base method.
func (m *MockIService) BatchUpsertThreePrimary(ctx context.Context, objs *[]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertThreePrimary", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpsertThreePrimary indicates an expected call of BatchUpsertThreePrimary.
func (mr *MockIServiceMockRecorder) BatchUpsertThreePrimary(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertThreePrimary", reflect.TypeOf((*MockIService)(nil).BatchUpsertThreePrimary), ctx, objs)
}

// CrawlingRealTimePrice mocks base method.
func (m *MockIService) CrawlingRealTimePrice(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrawlingRealTimePrice", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrawlingRealTimePrice indicates an expected call of CrawlingRealTimePrice.
func (mr *MockIServiceMockRecorder) CrawlingRealTimePrice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrawlingRealTimePrice", reflect.TypeOf((*MockIService)(nil).CrawlingRealTimePrice), ctx)
}

// CreateOrder mocks base method.
func (m *MockIService) CreateOrder(ctx context.Context, req *dto.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIServiceMockRecorder) CreateOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIService)(nil).CreateOrder), ctx, req)
}

// CreateTransaction mocks base method.
func (m *MockIService) CreateTransaction(ctx context.Context, orderType string, creditAmount, debitAmount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, orderType, creditAmount, debitAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIServiceMockRecorder) CreateTransaction(ctx, orderType, creditAmount, debitAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIService)(nil).CreateTransaction), ctx, orderType, creditAmount, debitAmount)
}

// CreateUser mocks base method.
func (m *MockIService) CreateUser(ctx context.Context, obj *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceMockRecorder) CreateUser(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIService)(nil).CreateUser), ctx, obj)
}

// CronjobPresetRealtimeMonitoringKeys mocks base method.
func (m *MockIService) CronjobPresetRealtimeMonitoringKeys(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronjobPresetRealtimeMonitoringKeys", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CronjobPresetRealtimeMonitoringKeys indicates an expected call of CronjobPresetRealtimeMonitoringKeys.
func (mr *MockIServiceMockRecorder) CronjobPresetRealtimeMonitoringKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronjobPresetRealtimeMonitoringKeys", reflect.TypeOf((*MockIService)(nil).CronjobPresetRealtimeMonitoringKeys), ctx)
}

// DeletePickedStockByID mocks base method.
func (m *MockIService) DeletePickedStockByID(ctx context.Context, stockID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePickedStockByID", ctx, stockID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePickedStockByID indicates an expected call of DeletePickedStockByID.
func (mr *MockIServiceMockRecorder) DeletePickedStockByID(ctx, stockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePickedStockByID", reflect.TypeOf((*MockIService)(nil).DeletePickedStockByID), ctx, stockID)
}

// DeleteUser mocks base method.
func (m *MockIService) DeleteUser(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIServiceMockRecorder) DeleteUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIService)(nil).DeleteUser), ctx)
}

// GetBalance mocks base method.
func (m *MockIService) GetBalance(ctx context.Context) (*domain.BalanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx)
	ret0, _ := ret[0].(*domain.BalanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIServiceMockRecorder) GetBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIService)(nil).GetBalance), ctx)
}

// GetStakeConcentration mocks base method.
func (m *MockIService) GetStakeConcentration(ctx context.Context, req *dto.GetStakeConcentrationRequest) (*domain.StakeConcentration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakeConcentration", ctx, req)
	ret0, _ := ret[0].(*domain.StakeConcentration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakeConcentration indicates an expected call of GetStakeConcentration.
func (mr *MockIServiceMockRecorder) GetStakeConcentration(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakeConcentration", reflect.TypeOf((*MockIService)(nil).GetStakeConcentration), ctx, req)
}

// GetUserByEmail mocks base method.
func (m *MockIService) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIServiceMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIService)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockIService) GetUserByID(ctx context.Context, id uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIServiceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIService)(nil).GetUserByID), ctx, id)
}

// GetUserByPhone mocks base method.
func (m *MockIService) GetUserByPhone(ctx context.Context, phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockIServiceMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockIService)(nil).GetUserByPhone), ctx, phone)
}

// HasDailyClose mocks base method.
func (m *MockIService) HasDailyClose(ctx context.Context, date string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDailyClose", ctx, date)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDailyClose indicates an expected call of HasDailyClose.
func (mr *MockIServiceMockRecorder) HasDailyClose(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDailyClose", reflect.TypeOf((*MockIService)(nil).HasDailyClose), ctx, date)
}

// ListCategories mocks base method.
func (m *MockIService) ListCategories(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockIServiceMockRecorder) ListCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockIService)(nil).ListCategories), ctx)
}

// ListDailyClose mocks base method.
func (m *MockIService) ListDailyClose(ctx context.Context, req *dto.ListDailyCloseRequest) ([]*domain.DailyClose, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDailyClose", ctx, req)
	ret0, _ := ret[0].([]*domain.DailyClose)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDailyClose indicates an expected call of ListDailyClose.
func (mr *MockIServiceMockRecorder) ListDailyClose(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDailyClose", reflect.TypeOf((*MockIService)(nil).ListDailyClose), ctx, req)
}

// ListOrders mocks base method.
func (m *MockIService) ListOrders(ctx context.Context, req *dto.ListOrderRequest) ([]*domain.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, req)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockIServiceMockRecorder) ListOrders(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockIService)(nil).ListOrders), ctx, req)
}

// ListPickedStock mocks base method.
func (m *MockIService) ListPickedStock(ctx context.Context) ([]*domain.Selection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPickedStock", ctx)
	ret0, _ := ret[0].([]*domain.Selection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPickedStock indicates an expected call of ListPickedStock.
func (mr *MockIServiceMockRecorder) ListPickedStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPickedStock", reflect.TypeOf((*MockIService)(nil).ListPickedStock), ctx)
}

// ListSelections mocks base method.
func (m *MockIService) ListSelections(ctx context.Context, req *dto.ListSelectionRequest) ([]*domain.Selection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelections", ctx, req)
	ret0, _ := ret[0].([]*domain.Selection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelections indicates an expected call of ListSelections.
func (mr *MockIServiceMockRecorder) ListSelections(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelections", reflect.TypeOf((*MockIService)(nil).ListSelections), ctx, req)
}

// ListStock mocks base method.
func (m *MockIService) ListStock(ctx context.Context, req *dto.ListStockRequest) ([]*domain.Stock, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStock", ctx, req)
	ret0, _ := ret[0].([]*domain.Stock)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStock indicates an expected call of ListStock.
func (mr *MockIServiceMockRecorder) ListStock(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStock", reflect.TypeOf((*MockIService)(nil).ListStock), ctx, req)
}

// ListThreePrimary mocks base method.
func (m *MockIService) ListThreePrimary(ctx context.Context, req *dto.ListThreePrimaryRequest) ([]*domain.ThreePrimary, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThreePrimary", ctx, req)
	ret0, _ := ret[0].([]*domain.ThreePrimary)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListThreePrimary indicates an expected call of ListThreePrimary.
func (mr *MockIServiceMockRecorder) ListThreePrimary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThreePrimary", reflect.TypeOf((*MockIService)(nil).ListThreePrimary), ctx, req)
}

// ListUsers mocks base method.
func (m *MockIService) ListUsers(ctx context.Context, req *dto.ListUsersRequest) ([]*domain.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, req)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIServiceMockRecorder) ListUsers(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIService)(nil).ListUsers), ctx, req)
}

// ListeningKafkaInput mocks base method.
func (m *MockIService) ListeningKafkaInput(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListeningKafkaInput", ctx)
}

// ListeningKafkaInput indicates an expected call of ListeningKafkaInput.
func (mr *MockIServiceMockRecorder) ListeningKafkaInput(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListeningKafkaInput", reflect.TypeOf((*MockIService)(nil).ListeningKafkaInput), ctx)
}

// Login mocks base method.
func (m *MockIService) Login(ctx context.Context, email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIServiceMockRecorder) Login(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIService)(nil).Login), ctx, email, password)
}

// Logout mocks base method.
func (m *MockIService) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIServiceMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIService)(nil).Logout), ctx)
}

// ObtainLock mocks base method.
func (m *MockIService) ObtainLock(ctx context.Context, key string, expire time.Duration) *redislock.Lock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainLock", ctx, key, expire)
	ret0, _ := ret[0].(*redislock.Lock)
	return ret0
}

// ObtainLock indicates an expected call of ObtainLock.
func (mr *MockIServiceMockRecorder) ObtainLock(ctx, key, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainLock", reflect.TypeOf((*MockIService)(nil).ObtainLock), ctx, key, expire)
}

// StartCron mocks base method.
func (m *MockIService) StartCron() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCron")
}

// StartCron indicates an expected call of StartCron.
func (mr *MockIServiceMockRecorder) StartCron() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCron", reflect.TypeOf((*MockIService)(nil).StartCron))
}

// StopCron mocks base method.
func (m *MockIService) StopCron() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopCron")
}

// StopCron indicates an expected call of StopCron.
func (mr *MockIServiceMockRecorder) StopCron() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCron", reflect.TypeOf((*MockIService)(nil).StopCron))
}

// StopKafka mocks base method.
func (m *MockIService) StopKafka() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKafka")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopKafka indicates an expected call of StopKafka.
func (mr *MockIServiceMockRecorder) StopKafka() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKafka", reflect.TypeOf((*MockIService)(nil).StopKafka))
}

// StopRedis mocks base method.
func (m *MockIService) StopRedis() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRedis")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRedis indicates an expected call of StopRedis.
func (mr *MockIServiceMockRecorder) StopRedis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRedis", reflect.TypeOf((*MockIService)(nil).StopRedis))
}

// UpdateUser mocks base method.
func (m *MockIService) UpdateUser(ctx context.Context, obj *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIServiceMockRecorder) UpdateUser(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIService)(nil).UpdateUser), ctx, obj)
}

// WithUserID mocks base method.
func (m *MockIService) WithUserID(ctx context.Context) services.IService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUserID", ctx)
	ret0, _ := ret[0].(services.IService)
	return ret0
}

// WithUserID indicates an expected call of WithUserID.
func (mr *MockIServiceMockRecorder) WithUserID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUserID", reflect.TypeOf((*MockIService)(nil).WithUserID), ctx)
}
