// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: jarvis.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JarvisV1Client is the client API for JarvisV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisV1Client interface {
	ListDailyClose(ctx context.Context, in *ListDailyCloseRequest, opts ...grpc.CallOption) (*ListDailyCloseResponse, error)
	ListStocks(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	GetStakeConcentration(ctx context.Context, in *GetStakeConcentrationRequest, opts ...grpc.CallOption) (*GetStakeConcentrationResponse, error)
	ListThreePrimary(ctx context.Context, in *ListThreePrimaryRequest, opts ...grpc.CallOption) (*ListThreePrimaryResponse, error)
	ListSelections(ctx context.Context, in *ListSelectionRequest, opts ...grpc.CallOption) (*ListSelectionResponse, error)
	ListPickedStocks(ctx context.Context, in *ListPickedStocksRequest, opts ...grpc.CallOption) (*ListPickedStocksResponse, error)
	InsertPickedStocks(ctx context.Context, in *InsertPickedStocksRequest, opts ...grpc.CallOption) (*InsertPickedStocksResponse, error)
	DeletePickedStocks(ctx context.Context, in *DeletePickedStocksRequest, opts ...grpc.CallOption) (*DeletePickedStocksResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
}

type jarvisV1Client struct {
	cc grpc.ClientConnInterface
}

func NewJarvisV1Client(cc grpc.ClientConnInterface) JarvisV1Client {
	return &jarvisV1Client{cc}
}

func (c *jarvisV1Client) ListDailyClose(ctx context.Context, in *ListDailyCloseRequest, opts ...grpc.CallOption) (*ListDailyCloseResponse, error) {
	out := new(ListDailyCloseResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListDailyClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListStocks(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockResponse, error) {
	out := new(ListStockResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) GetStakeConcentration(ctx context.Context, in *GetStakeConcentrationRequest, opts ...grpc.CallOption) (*GetStakeConcentrationResponse, error) {
	out := new(GetStakeConcentrationResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/GetStakeConcentration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListThreePrimary(ctx context.Context, in *ListThreePrimaryRequest, opts ...grpc.CallOption) (*ListThreePrimaryResponse, error) {
	out := new(ListThreePrimaryResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListThreePrimary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListSelections(ctx context.Context, in *ListSelectionRequest, opts ...grpc.CallOption) (*ListSelectionResponse, error) {
	out := new(ListSelectionResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListSelections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListPickedStocks(ctx context.Context, in *ListPickedStocksRequest, opts ...grpc.CallOption) (*ListPickedStocksResponse, error) {
	out := new(ListPickedStocksResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListPickedStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) InsertPickedStocks(ctx context.Context, in *InsertPickedStocksRequest, opts ...grpc.CallOption) (*InsertPickedStocksResponse, error) {
	out := new(InsertPickedStocksResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/InsertPickedStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) DeletePickedStocks(ctx context.Context, in *DeletePickedStocksRequest, opts ...grpc.CallOption) (*DeletePickedStocksResponse, error) {
	out := new(DeletePickedStocksResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/DeletePickedStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisV1Client) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/jarvis.v1.JarvisV1/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisV1Server is the server API for JarvisV1 service.
// All implementations should embed UnimplementedJarvisV1Server
// for forward compatibility
type JarvisV1Server interface {
	ListDailyClose(context.Context, *ListDailyCloseRequest) (*ListDailyCloseResponse, error)
	ListStocks(context.Context, *ListStockRequest) (*ListStockResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	GetStakeConcentration(context.Context, *GetStakeConcentrationRequest) (*GetStakeConcentrationResponse, error)
	ListThreePrimary(context.Context, *ListThreePrimaryRequest) (*ListThreePrimaryResponse, error)
	ListSelections(context.Context, *ListSelectionRequest) (*ListSelectionResponse, error)
	ListPickedStocks(context.Context, *ListPickedStocksRequest) (*ListPickedStocksResponse, error)
	InsertPickedStocks(context.Context, *InsertPickedStocksRequest) (*InsertPickedStocksResponse, error)
	DeletePickedStocks(context.Context, *DeletePickedStocksRequest) (*DeletePickedStocksResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
}

// UnimplementedJarvisV1Server should be embedded to have forward compatible implementations.
type UnimplementedJarvisV1Server struct {
}

func (UnimplementedJarvisV1Server) ListDailyClose(context.Context, *ListDailyCloseRequest) (*ListDailyCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyClose not implemented")
}
func (UnimplementedJarvisV1Server) ListStocks(context.Context, *ListStockRequest) (*ListStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStocks not implemented")
}
func (UnimplementedJarvisV1Server) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedJarvisV1Server) GetStakeConcentration(context.Context, *GetStakeConcentrationRequest) (*GetStakeConcentrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeConcentration not implemented")
}
func (UnimplementedJarvisV1Server) ListThreePrimary(context.Context, *ListThreePrimaryRequest) (*ListThreePrimaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreePrimary not implemented")
}
func (UnimplementedJarvisV1Server) ListSelections(context.Context, *ListSelectionRequest) (*ListSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelections not implemented")
}
func (UnimplementedJarvisV1Server) ListPickedStocks(context.Context, *ListPickedStocksRequest) (*ListPickedStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPickedStocks not implemented")
}
func (UnimplementedJarvisV1Server) InsertPickedStocks(context.Context, *InsertPickedStocksRequest) (*InsertPickedStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertPickedStocks not implemented")
}
func (UnimplementedJarvisV1Server) DeletePickedStocks(context.Context, *DeletePickedStocksRequest) (*DeletePickedStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePickedStocks not implemented")
}
func (UnimplementedJarvisV1Server) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedJarvisV1Server) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedJarvisV1Server) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedJarvisV1Server) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}

// UnsafeJarvisV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisV1Server will
// result in compilation errors.
type UnsafeJarvisV1Server interface {
	mustEmbedUnimplementedJarvisV1Server()
}

func RegisterJarvisV1Server(s grpc.ServiceRegistrar, srv JarvisV1Server) {
	s.RegisterService(&JarvisV1_ServiceDesc, srv)
}

func _JarvisV1_ListDailyClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListDailyClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListDailyClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListDailyClose(ctx, req.(*ListDailyCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListStocks(ctx, req.(*ListStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_GetStakeConcentration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeConcentrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).GetStakeConcentration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/GetStakeConcentration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).GetStakeConcentration(ctx, req.(*GetStakeConcentrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListThreePrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreePrimaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListThreePrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListThreePrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListThreePrimary(ctx, req.(*ListThreePrimaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListSelections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListSelections(ctx, req.(*ListSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListPickedStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPickedStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListPickedStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListPickedStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListPickedStocks(ctx, req.(*ListPickedStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_InsertPickedStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPickedStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).InsertPickedStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/InsertPickedStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).InsertPickedStocks(ctx, req.(*InsertPickedStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_DeletePickedStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePickedStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).DeletePickedStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/DeletePickedStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).DeletePickedStocks(ctx, req.(*DeletePickedStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisV1_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisV1Server).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.v1.JarvisV1/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisV1Server).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JarvisV1_ServiceDesc is the grpc.ServiceDesc for JarvisV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JarvisV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jarvis.v1.JarvisV1",
	HandlerType: (*JarvisV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDailyClose",
			Handler:    _JarvisV1_ListDailyClose_Handler,
		},
		{
			MethodName: "ListStocks",
			Handler:    _JarvisV1_ListStocks_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _JarvisV1_ListCategories_Handler,
		},
		{
			MethodName: "GetStakeConcentration",
			Handler:    _JarvisV1_GetStakeConcentration_Handler,
		},
		{
			MethodName: "ListThreePrimary",
			Handler:    _JarvisV1_ListThreePrimary_Handler,
		},
		{
			MethodName: "ListSelections",
			Handler:    _JarvisV1_ListSelections_Handler,
		},
		{
			MethodName: "ListPickedStocks",
			Handler:    _JarvisV1_ListPickedStocks_Handler,
		},
		{
			MethodName: "InsertPickedStocks",
			Handler:    _JarvisV1_InsertPickedStocks_Handler,
		},
		{
			MethodName: "DeletePickedStocks",
			Handler:    _JarvisV1_DeletePickedStocks_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _JarvisV1_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _JarvisV1_ListUsers_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _JarvisV1_GetBalance_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _JarvisV1_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvis.v1.proto",
}
