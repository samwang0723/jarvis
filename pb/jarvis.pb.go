// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: jarvis.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDailyCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset       int32                       `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32                       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchParams *ListDailyCloseSearchParams `protobuf:"bytes,3,opt,name=searchParams,proto3" json:"searchParams,omitempty"`
}

func (x *ListDailyCloseRequest) Reset() {
	*x = ListDailyCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyCloseRequest) ProtoMessage() {}

func (x *ListDailyCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyCloseRequest.ProtoReflect.Descriptor instead.
func (*ListDailyCloseRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{0}
}

func (x *ListDailyCloseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDailyCloseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDailyCloseRequest) GetSearchParams() *ListDailyCloseSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

type ListDailyCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int32         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalCount int64         `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Entries    []*DailyClose `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ListDailyCloseResponse) Reset() {
	*x = ListDailyCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyCloseResponse) ProtoMessage() {}

func (x *ListDailyCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyCloseResponse.ProtoReflect.Descriptor instead.
func (*ListDailyCloseResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{1}
}

func (x *ListDailyCloseResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDailyCloseResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDailyCloseResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDailyCloseResponse) GetEntries() []*DailyClose {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ListDailyCloseSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockIDs []string `protobuf:"bytes,1,rep,name=stockIDs,proto3" json:"stockIDs,omitempty"`
	Start    string   `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End      string   `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ListDailyCloseSearchParams) Reset() {
	*x = ListDailyCloseSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyCloseSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyCloseSearchParams) ProtoMessage() {}

func (x *ListDailyCloseSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyCloseSearchParams.ProtoReflect.Descriptor instead.
func (*ListDailyCloseSearchParams) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{2}
}

func (x *ListDailyCloseSearchParams) GetStockIDs() []string {
	if x != nil {
		return x.StockIDs
	}
	return nil
}

func (x *ListDailyCloseSearchParams) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *ListDailyCloseSearchParams) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type DailyClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	StockID      string                 `protobuf:"bytes,5,opt,name=stockID,proto3" json:"stockID,omitempty"`
	Date         string                 `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	TradeShares  uint64                 `protobuf:"varint,7,opt,name=tradeShares,proto3" json:"tradeShares,omitempty"`
	Transactions uint64                 `protobuf:"varint,8,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Turnover     uint64                 `protobuf:"varint,9,opt,name=turnover,proto3" json:"turnover,omitempty"`
	Open         float32                `protobuf:"fixed32,10,opt,name=open,proto3" json:"open,omitempty"`
	Close        float32                `protobuf:"fixed32,11,opt,name=close,proto3" json:"close,omitempty"`
	High         float32                `protobuf:"fixed32,12,opt,name=high,proto3" json:"high,omitempty"`
	Low          float32                `protobuf:"fixed32,13,opt,name=low,proto3" json:"low,omitempty"`
	Diff         float32                `protobuf:"fixed32,14,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *DailyClose) Reset() {
	*x = DailyClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyClose) ProtoMessage() {}

func (x *DailyClose) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyClose.ProtoReflect.Descriptor instead.
func (*DailyClose) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{3}
}

func (x *DailyClose) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DailyClose) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DailyClose) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DailyClose) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *DailyClose) GetStockID() string {
	if x != nil {
		return x.StockID
	}
	return ""
}

func (x *DailyClose) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyClose) GetTradeShares() uint64 {
	if x != nil {
		return x.TradeShares
	}
	return 0
}

func (x *DailyClose) GetTransactions() uint64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *DailyClose) GetTurnover() uint64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *DailyClose) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *DailyClose) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *DailyClose) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *DailyClose) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *DailyClose) GetDiff() float32 {
	if x != nil {
		return x.Diff
	}
	return 0
}

type ListStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset       int32                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchParams *ListStockSearchParams `protobuf:"bytes,3,opt,name=searchParams,proto3" json:"searchParams,omitempty"`
}

func (x *ListStockRequest) Reset() {
	*x = ListStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStockRequest) ProtoMessage() {}

func (x *ListStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStockRequest.ProtoReflect.Descriptor instead.
func (*ListStockRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{4}
}

func (x *ListStockRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListStockRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStockRequest) GetSearchParams() *ListStockSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

type ListStockSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockIDs []string `protobuf:"bytes,1,rep,name=stockIDs,proto3" json:"stockIDs,omitempty"`
	Country  string   `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Category string   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ListStockSearchParams) Reset() {
	*x = ListStockSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStockSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStockSearchParams) ProtoMessage() {}

func (x *ListStockSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStockSearchParams.ProtoReflect.Descriptor instead.
func (*ListStockSearchParams) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{5}
}

func (x *ListStockSearchParams) GetStockIDs() []string {
	if x != nil {
		return x.StockIDs
	}
	return nil
}

func (x *ListStockSearchParams) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ListStockSearchParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListStockSearchParams) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type ListStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int32    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalCount int64    `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Entries    []*Stock `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ListStockResponse) Reset() {
	*x = ListStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStockResponse) ProtoMessage() {}

func (x *ListStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStockResponse.ProtoReflect.Descriptor instead.
func (*ListStockResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{6}
}

func (x *ListStockResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListStockResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStockResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListStockResponse) GetEntries() []*Stock {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	StockID   string                 `protobuf:"bytes,5,opt,name=stockID,proto3" json:"stockID,omitempty"`
	Name      string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Country   string                 `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	Category  string                 `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{7}
}

func (x *Stock) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Stock) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Stock) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Stock) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Stock) GetStockID() string {
	if x != nil {
		return x.StockID
	}
	return ""
}

func (x *Stock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stock) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Stock) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type ListCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCategoriesRequest) Reset() {
	*x = ListCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoriesRequest) ProtoMessage() {}

func (x *ListCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoriesRequest.ProtoReflect.Descriptor instead.
func (*ListCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{8}
}

type ListCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []string `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ListCategoriesResponse) Reset() {
	*x = ListCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoriesResponse) ProtoMessage() {}

func (x *ListCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoriesResponse.ProtoReflect.Descriptor instead.
func (*ListCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{9}
}

func (x *ListCategoriesResponse) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetStakeConcentrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockID string `protobuf:"bytes,1,opt,name=stockID,proto3" json:"stockID,omitempty"`
	Date    string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetStakeConcentrationRequest) Reset() {
	*x = GetStakeConcentrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeConcentrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeConcentrationRequest) ProtoMessage() {}

func (x *GetStakeConcentrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeConcentrationRequest.ProtoReflect.Descriptor instead.
func (*GetStakeConcentrationRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{10}
}

func (x *GetStakeConcentrationRequest) GetStockID() string {
	if x != nil {
		return x.StockID
	}
	return ""
}

func (x *GetStakeConcentrationRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetStakeConcentrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeConcentration *StakeConcentration `protobuf:"bytes,1,opt,name=stakeConcentration,proto3" json:"stakeConcentration,omitempty"`
}

func (x *GetStakeConcentrationResponse) Reset() {
	*x = GetStakeConcentrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeConcentrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeConcentrationResponse) ProtoMessage() {}

func (x *GetStakeConcentrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeConcentrationResponse.ProtoReflect.Descriptor instead.
func (*GetStakeConcentrationResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{11}
}

func (x *GetStakeConcentrationResponse) GetStakeConcentration() *StakeConcentration {
	if x != nil {
		return x.StakeConcentration
	}
	return nil
}

type StakeConcentration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	StockID          string                 `protobuf:"bytes,5,opt,name=stockID,proto3" json:"stockID,omitempty"`
	Date             string                 `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	SumBuyShares     uint64                 `protobuf:"varint,7,opt,name=sumBuyShares,proto3" json:"sumBuyShares,omitempty"`
	SumSellShares    uint64                 `protobuf:"varint,8,opt,name=sumSellShares,proto3" json:"sumSellShares,omitempty"`
	AvgBuyPrice      float32                `protobuf:"fixed32,9,opt,name=avgBuyPrice,proto3" json:"avgBuyPrice,omitempty"`
	AvgSellPrice     float32                `protobuf:"fixed32,10,opt,name=avgSellPrice,proto3" json:"avgSellPrice,omitempty"`
	Concentration_1  float32                `protobuf:"fixed32,11,opt,name=concentration_1,json=concentration1,proto3" json:"concentration_1,omitempty"`
	Concentration_5  float32                `protobuf:"fixed32,12,opt,name=concentration_5,json=concentration5,proto3" json:"concentration_5,omitempty"`
	Concentration_10 float32                `protobuf:"fixed32,13,opt,name=concentration_10,json=concentration10,proto3" json:"concentration_10,omitempty"`
	Concentration_20 float32                `protobuf:"fixed32,14,opt,name=concentration_20,json=concentration20,proto3" json:"concentration_20,omitempty"`
	Concentration_60 float32                `protobuf:"fixed32,15,opt,name=concentration_60,json=concentration60,proto3" json:"concentration_60,omitempty"`
}

func (x *StakeConcentration) Reset() {
	*x = StakeConcentration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeConcentration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeConcentration) ProtoMessage() {}

func (x *StakeConcentration) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeConcentration.ProtoReflect.Descriptor instead.
func (*StakeConcentration) Descriptor() ([]byte, []int) {
	return file_jarvis_proto_rawDescGZIP(), []int{12}
}

func (x *StakeConcentration) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StakeConcentration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *StakeConcentration) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *StakeConcentration) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *StakeConcentration) GetStockID() string {
	if x != nil {
		return x.StockID
	}
	return ""
}

func (x *StakeConcentration) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *StakeConcentration) GetSumBuyShares() uint64 {
	if x != nil {
		return x.SumBuyShares
	}
	return 0
}

func (x *StakeConcentration) GetSumSellShares() uint64 {
	if x != nil {
		return x.SumSellShares
	}
	return 0
}

func (x *StakeConcentration) GetAvgBuyPrice() float32 {
	if x != nil {
		return x.AvgBuyPrice
	}
	return 0
}

func (x *StakeConcentration) GetAvgSellPrice() float32 {
	if x != nil {
		return x.AvgSellPrice
	}
	return 0
}

func (x *StakeConcentration) GetConcentration_1() float32 {
	if x != nil {
		return x.Concentration_1
	}
	return 0
}

func (x *StakeConcentration) GetConcentration_5() float32 {
	if x != nil {
		return x.Concentration_5
	}
	return 0
}

func (x *StakeConcentration) GetConcentration_10() float32 {
	if x != nil {
		return x.Concentration_10
	}
	return 0
}

func (x *StakeConcentration) GetConcentration_20() float32 {
	if x != nil {
		return x.Concentration_20
	}
	return 0
}

func (x *StakeConcentration) GetConcentration_60() float32 {
	if x != nil {
		return x.Concentration_60
	}
	return 0
}

var File_jarvis_proto protoreflect.FileDescriptor

var file_jarvis_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x46, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xbe,
	0x03, 0x0a, 0x0a, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22,
	0x83, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x61, 0x72, 0x76,
	0x69, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xa9, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x17, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x42,
	0x75, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x75, 0x6d, 0x42, 0x75, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x53,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x35, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x30, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x30, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x30,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x36, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x30, 0x32, 0xd5, 0x03, 0x0a, 0x06,
	0x4a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x90, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x90, 0x02, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x90, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x91, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76,
	0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x90, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x7d, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x61, 0x6d, 0x77, 0x61, 0x6e, 0x67, 0x30, 0x37, 0x32, 0x33, 0x2f, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jarvis_proto_rawDescOnce sync.Once
	file_jarvis_proto_rawDescData = file_jarvis_proto_rawDesc
)

func file_jarvis_proto_rawDescGZIP() []byte {
	file_jarvis_proto_rawDescOnce.Do(func() {
		file_jarvis_proto_rawDescData = protoimpl.X.CompressGZIP(file_jarvis_proto_rawDescData)
	})
	return file_jarvis_proto_rawDescData
}

var file_jarvis_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_jarvis_proto_goTypes = []interface{}{
	(*ListDailyCloseRequest)(nil),         // 0: jarvis.ListDailyCloseRequest
	(*ListDailyCloseResponse)(nil),        // 1: jarvis.ListDailyCloseResponse
	(*ListDailyCloseSearchParams)(nil),    // 2: jarvis.ListDailyCloseSearchParams
	(*DailyClose)(nil),                    // 3: jarvis.DailyClose
	(*ListStockRequest)(nil),              // 4: jarvis.ListStockRequest
	(*ListStockSearchParams)(nil),         // 5: jarvis.ListStockSearchParams
	(*ListStockResponse)(nil),             // 6: jarvis.ListStockResponse
	(*Stock)(nil),                         // 7: jarvis.Stock
	(*ListCategoriesRequest)(nil),         // 8: jarvis.ListCategoriesRequest
	(*ListCategoriesResponse)(nil),        // 9: jarvis.ListCategoriesResponse
	(*GetStakeConcentrationRequest)(nil),  // 10: jarvis.GetStakeConcentrationRequest
	(*GetStakeConcentrationResponse)(nil), // 11: jarvis.GetStakeConcentrationResponse
	(*StakeConcentration)(nil),            // 12: jarvis.StakeConcentration
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
}
var file_jarvis_proto_depIdxs = []int32{
	2,  // 0: jarvis.ListDailyCloseRequest.searchParams:type_name -> jarvis.ListDailyCloseSearchParams
	3,  // 1: jarvis.ListDailyCloseResponse.entries:type_name -> jarvis.DailyClose
	13, // 2: jarvis.DailyClose.createdAt:type_name -> google.protobuf.Timestamp
	13, // 3: jarvis.DailyClose.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 4: jarvis.DailyClose.deletedAt:type_name -> google.protobuf.Timestamp
	5,  // 5: jarvis.ListStockRequest.searchParams:type_name -> jarvis.ListStockSearchParams
	7,  // 6: jarvis.ListStockResponse.entries:type_name -> jarvis.Stock
	13, // 7: jarvis.Stock.createdAt:type_name -> google.protobuf.Timestamp
	13, // 8: jarvis.Stock.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 9: jarvis.Stock.deletedAt:type_name -> google.protobuf.Timestamp
	12, // 10: jarvis.GetStakeConcentrationResponse.stakeConcentration:type_name -> jarvis.StakeConcentration
	13, // 11: jarvis.StakeConcentration.createdAt:type_name -> google.protobuf.Timestamp
	13, // 12: jarvis.StakeConcentration.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 13: jarvis.StakeConcentration.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 14: jarvis.Jarvis.ListDailyClose:input_type -> jarvis.ListDailyCloseRequest
	4,  // 15: jarvis.Jarvis.ListStocks:input_type -> jarvis.ListStockRequest
	8,  // 16: jarvis.Jarvis.ListCategories:input_type -> jarvis.ListCategoriesRequest
	10, // 17: jarvis.Jarvis.GetStakeConcentration:input_type -> jarvis.GetStakeConcentrationRequest
	1,  // 18: jarvis.Jarvis.ListDailyClose:output_type -> jarvis.ListDailyCloseResponse
	6,  // 19: jarvis.Jarvis.ListStocks:output_type -> jarvis.ListStockResponse
	9,  // 20: jarvis.Jarvis.ListCategories:output_type -> jarvis.ListCategoriesResponse
	11, // 21: jarvis.Jarvis.GetStakeConcentration:output_type -> jarvis.GetStakeConcentrationResponse
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_jarvis_proto_init() }
func file_jarvis_proto_init() {
	if File_jarvis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jarvis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyCloseSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStockSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeConcentrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeConcentrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeConcentration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jarvis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jarvis_proto_goTypes,
		DependencyIndexes: file_jarvis_proto_depIdxs,
		MessageInfos:      file_jarvis_proto_msgTypes,
	}.Build()
	File_jarvis_proto = out.File
	file_jarvis_proto_rawDesc = nil
	file_jarvis_proto_goTypes = nil
	file_jarvis_proto_depIdxs = nil
}
