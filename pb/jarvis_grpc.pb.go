// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: jarvis.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JarvisClient is the client API for Jarvis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisClient interface {
	ListDailyClose(ctx context.Context, in *ListDailyCloseRequest, opts ...grpc.CallOption) (*ListDailyCloseResponse, error)
	ListStocks(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	GetStakeConcentration(ctx context.Context, in *GetStakeConcentrationRequest, opts ...grpc.CallOption) (*GetStakeConcentrationResponse, error)
	StartCronjob(ctx context.Context, in *StartCronjobRequest, opts ...grpc.CallOption) (*StartCronjobResponse, error)
}

type jarvisClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisClient(cc grpc.ClientConnInterface) JarvisClient {
	return &jarvisClient{cc}
}

func (c *jarvisClient) ListDailyClose(ctx context.Context, in *ListDailyCloseRequest, opts ...grpc.CallOption) (*ListDailyCloseResponse, error) {
	out := new(ListDailyCloseResponse)
	err := c.cc.Invoke(ctx, "/jarvis.Jarvis/ListDailyClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisClient) ListStocks(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockResponse, error) {
	out := new(ListStockResponse)
	err := c.cc.Invoke(ctx, "/jarvis.Jarvis/ListStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/jarvis.Jarvis/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisClient) GetStakeConcentration(ctx context.Context, in *GetStakeConcentrationRequest, opts ...grpc.CallOption) (*GetStakeConcentrationResponse, error) {
	out := new(GetStakeConcentrationResponse)
	err := c.cc.Invoke(ctx, "/jarvis.Jarvis/GetStakeConcentration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisClient) StartCronjob(ctx context.Context, in *StartCronjobRequest, opts ...grpc.CallOption) (*StartCronjobResponse, error) {
	out := new(StartCronjobResponse)
	err := c.cc.Invoke(ctx, "/jarvis.Jarvis/StartCronjob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisServer is the server API for Jarvis service.
// All implementations should embed UnimplementedJarvisServer
// for forward compatibility
type JarvisServer interface {
	ListDailyClose(context.Context, *ListDailyCloseRequest) (*ListDailyCloseResponse, error)
	ListStocks(context.Context, *ListStockRequest) (*ListStockResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	GetStakeConcentration(context.Context, *GetStakeConcentrationRequest) (*GetStakeConcentrationResponse, error)
	StartCronjob(context.Context, *StartCronjobRequest) (*StartCronjobResponse, error)
}

// UnimplementedJarvisServer should be embedded to have forward compatible implementations.
type UnimplementedJarvisServer struct {
}

func (UnimplementedJarvisServer) ListDailyClose(context.Context, *ListDailyCloseRequest) (*ListDailyCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyClose not implemented")
}
func (UnimplementedJarvisServer) ListStocks(context.Context, *ListStockRequest) (*ListStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStocks not implemented")
}
func (UnimplementedJarvisServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedJarvisServer) GetStakeConcentration(context.Context, *GetStakeConcentrationRequest) (*GetStakeConcentrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeConcentration not implemented")
}
func (UnimplementedJarvisServer) StartCronjob(context.Context, *StartCronjobRequest) (*StartCronjobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCronjob not implemented")
}

// UnsafeJarvisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisServer will
// result in compilation errors.
type UnsafeJarvisServer interface {
	mustEmbedUnimplementedJarvisServer()
}

func RegisterJarvisServer(s grpc.ServiceRegistrar, srv JarvisServer) {
	s.RegisterService(&Jarvis_ServiceDesc, srv)
}

func _Jarvis_ListDailyClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).ListDailyClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.Jarvis/ListDailyClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).ListDailyClose(ctx, req.(*ListDailyCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jarvis_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.Jarvis/ListStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).ListStocks(ctx, req.(*ListStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jarvis_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.Jarvis/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jarvis_GetStakeConcentration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeConcentrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).GetStakeConcentration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.Jarvis/GetStakeConcentration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).GetStakeConcentration(ctx, req.(*GetStakeConcentrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jarvis_StartCronjob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCronjobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).StartCronjob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.Jarvis/StartCronjob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).StartCronjob(ctx, req.(*StartCronjobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jarvis_ServiceDesc is the grpc.ServiceDesc for Jarvis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jarvis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jarvis.Jarvis",
	HandlerType: (*JarvisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDailyClose",
			Handler:    _Jarvis_ListDailyClose_Handler,
		},
		{
			MethodName: "ListStocks",
			Handler:    _Jarvis_ListStocks_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _Jarvis_ListCategories_Handler,
		},
		{
			MethodName: "GetStakeConcentration",
			Handler:    _Jarvis_GetStakeConcentration_Handler,
		},
		{
			MethodName: "StartCronjob",
			Handler:    _Jarvis_StartCronjob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvis.proto",
}
